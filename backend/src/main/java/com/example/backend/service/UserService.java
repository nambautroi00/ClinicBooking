package com.example.backend.service;

import java.util.List;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import com.example.backend.exception.ConflictException;
import com.example.backend.exception.NotFoundException;
import com.example.backend.model.Role;
import com.example.backend.model.User;
import com.example.backend.repository.RoleRepository;
import com.example.backend.repository.UserRepository;
import com.example.backend.service.DoctorService;
import com.example.backend.service.PatientService;
import com.example.backend.repository.DoctorRepository;
import com.example.backend.repository.PatientRepository;
import com.example.backend.model.Doctor;
import com.example.backend.model.Patient;

import lombok.RequiredArgsConstructor;

/**
 * Service class cho User entity
 * Ch·ª©a business logic ƒë·ªÉ x·ª≠ l√Ω c√°c thao t√°c CRUD v·ªõi User
 */
@Service
@RequiredArgsConstructor
@Transactional
public class UserService {

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final DoctorService doctorService;
    private final PatientService patientService;
    private final DoctorRepository doctorRepository;
    private final PatientRepository patientRepository;

    /**
     * L·∫•y t·∫•t c·∫£ user v·ªõi th√¥ng tin role
     * @param pageable th√¥ng tin ph√¢n trang
     * @return danh s√°ch user v·ªõi ph√¢n trang
     */
    @Transactional(readOnly = true)
    public Page<User> getAllUsersWithRole(Pageable pageable) {
        return userRepository.findAllWithRole(pageable);
    }

    /**
     * L·∫•y user theo ID v·ªõi th√¥ng tin role
     * @param userId ID c·ªßa user
     * @return user n·∫øu t√¨m th·∫•y
     * @throws NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y user
     */
    @Transactional(readOnly = true)
    public User getUserByIdWithRole(Long userId) {
        return userRepository.findByIdWithRole(userId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + userId));
    }

    /**
     * L·∫•y user theo email v·ªõi th√¥ng tin role
     * @param email email c·ªßa user
     * @return user n·∫øu t√¨m th·∫•y
     * @throws NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y user
     */
    @Transactional(readOnly = true)
    public User getUserByEmailWithRole(String email) {
        return userRepository.findByEmailWithRole(email)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y user v·ªõi email: " + email));
    }

    /**
     * T√¨m user v·ªõi c√°c b·ªô l·ªçc
     * @param email email ƒë·ªÉ t√¨m ki·∫øm
     * @param firstName t√™n ƒë·ªÉ t√¨m ki·∫øm
     * @param lastName h·ªç ƒë·ªÉ t√¨m ki·∫øm
     * @param status tr·∫°ng th√°i ƒë·ªÉ t√¨m ki·∫øm
     * @param roleId ID role ƒë·ªÉ t√¨m ki·∫øm
     * @param pageable th√¥ng tin ph√¢n trang
     * @return danh s√°ch user v·ªõi ph√¢n trang
     */
    @Transactional(readOnly = true)
    public Page<User> searchUsersWithFilters(String email, String firstName, String lastName, 
                                           User.UserStatus status, Long roleId, Pageable pageable) {
        return userRepository.findUsersWithFilters(email, firstName, lastName, status, roleId, pageable);
    }

    /**
     * L·∫•y t·∫•t c·∫£ user c√πng d·ªØ li·ªáu Doctor/Patient n·∫øu c√≥
     * @return danh s√°ch user v·ªõi th√¥ng tin Doctor/Patient
     */
    @Transactional(readOnly = true)
    public List<User> getAllUsersWithDoctorAndPatientInfo() {
        return userRepository.findAllWithDoctorAndPatientInfo();
    }

    /**
     * T√¨m user theo roleId v·ªõi th√¥ng tin Doctor/Patient
     * @param roleId ID c·ªßa role
     * @return danh s√°ch user theo role
     */
    @Transactional(readOnly = true)
    public List<User> getUsersByRoleIdWithDoctorAndPatientInfo(Long roleId) {
        return userRepository.findByRoleIdWithDoctorAndPatientInfo(roleId);
    }

    /**
     * T√¨m user theo t√™n v·ªõi th√¥ng tin Doctor/Patient
     * @param keyword t·ª´ kh√≥a t√¨m ki·∫øm
     * @return danh s√°ch user theo t√™n
     */
    @Transactional(readOnly = true)
    public List<User> getUsersByNameWithDoctorAndPatientInfo(String keyword) {
        return userRepository.findByNameContainingWithDoctorAndPatientInfo(keyword);
    }

    /**
     * T·∫°o user m·ªõi
     * @param email email c·ªßa user
     * @param passwordHash hash c·ªßa password
     * @param firstName t√™n
     * @param lastName h·ªç
     * @param phone s·ªë ƒëi·ªán tho·∫°i
     * @param gender gi·ªõi t√≠nh
     * @param dateOfBirth ng√†y sinh
     * @param address ƒë·ªãa ch·ªâ
     * @param roleId ID c·ªßa role
     * @return user ƒë√£ ƒë∆∞·ª£c t·∫°o
     * @throws ConflictException n·∫øu email ƒë√£ t·ªìn t·∫°i
     * @throws NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y role ho·∫∑c roleId null
     */
    public User createUser(String email, String passwordHash, String firstName, String lastName, 
                          String phone, User.Gender gender, java.time.LocalDate dateOfBirth, 
                          String address, Long roleId) {
        
        // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
        if (userRepository.existsByEmail(email)) {
            throw new ConflictException("Email ƒë√£ t·ªìn t·∫°i: " + email);
        }

        // Ki·ªÉm tra roleId kh√¥ng null
        if (roleId == null) {
            throw new IllegalArgumentException("RoleId kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng");
        }

        // Ki·ªÉm tra role t·ªìn t·∫°i
        Role role = roleRepository.findById(roleId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y role v·ªõi ID: " + roleId));

        // T·∫°o user m·ªõi
        User user = new User();
        user.setEmail(email);
        user.setPasswordHash(passwordHash);
        user.setFirstName(firstName);
        user.setLastName(lastName);
        user.setPhone(phone);
        user.setGender(gender);
        user.setDateOfBirth(dateOfBirth);
        user.setAddress(address);
        user.setRole(role);
        user.setStatus(User.UserStatus.ACTIVE);

        User savedUser = userRepository.save(user);

        // T·ª± ƒë·ªông t·∫°o Doctor ho·∫∑c Patient record d·ª±a tr√™n role
        System.out.println("üîç B·∫Øt ƒë·∫ßu t·∫°o record cho userId: " + savedUser.getUserId() + ", roleId: " + roleId);
        
        if (roleId == 18L) { // Doctor role
            System.out.println("üë®‚Äç‚öïÔ∏è T·∫°o doctor record...");
            try {
                Doctor doctor = new Doctor();
                doctor.setUserId(savedUser.getUserId());
                doctor.setBio("B√°c sƒ© chuy√™n khoa");
                doctor.setSpecialty("N·ªôi khoa");
                doctor.setStatus("ACTIVE");
                
                Doctor savedDoctor = doctorRepository.save(doctor);
                System.out.println("‚úÖ ƒê√£ t·∫°o doctor record v·ªõi ID: " + savedDoctor.getDoctorId() + " cho userId: " + savedUser.getUserId());
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói khi t·∫°o doctor record: " + e.getMessage());
                e.printStackTrace();
            }
        } else if (roleId == 19L) { // Patient role
            System.out.println("üè• T·∫°o patient record...");
            try {
                Patient patient = new Patient();
                patient.setUserId(savedUser.getUserId());
                patient.setHealthInsuranceNumber(null);
                patient.setMedicalHistory(null);
                patient.setStatus("ACTIVE");
                
                Patient savedPatient = patientRepository.save(patient);
                System.out.println("‚úÖ ƒê√£ t·∫°o patient record v·ªõi ID: " + savedPatient.getPatientId() + " cho userId: " + savedUser.getUserId());
            } catch (Exception e) {
                System.err.println("‚ùå L·ªói khi t·∫°o patient record: " + e.getMessage());
                e.printStackTrace();
            }
        } else {
            System.out.println("‚ÑπÔ∏è Kh√¥ng c·∫ßn t·∫°o doctor/patient record cho roleId: " + roleId);
        }

        return savedUser;
    }

    /**
     * C·∫≠p nh·∫≠t th√¥ng tin user
     * @param userId ID c·ªßa user
     * @param email email m·ªõi
     * @param firstName t√™n m·ªõi
     * @param lastName h·ªç m·ªõi
     * @param phone s·ªë ƒëi·ªán tho·∫°i m·ªõi
     * @param gender gi·ªõi t√≠nh m·ªõi
     * @param dateOfBirth ng√†y sinh m·ªõi
     * @param address ƒë·ªãa ch·ªâ m·ªõi
     * @param status tr·∫°ng th√°i m·ªõi
     * @param roleId ID role m·ªõi
     * @return user ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
     * @throws NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y user ho·∫∑c role
     * @throws ConflictException n·∫øu email m·ªõi ƒë√£ t·ªìn t·∫°i
     */
    public User updateUser(Long userId, String email, String firstName, String lastName, 
                          String phone, User.Gender gender, java.time.LocalDate dateOfBirth, 
                          String address, User.UserStatus status, Long roleId) {
        
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + userId));

        // Ki·ªÉm tra email m·ªõi c√≥ tr√πng v·ªõi user kh√°c kh√¥ng (n·∫øu c√≥)
        if (email != null && !email.equals(user.getEmail())) {
            if (userRepository.existsByEmail(email)) {
                throw new ConflictException("Email ƒë√£ t·ªìn t·∫°i: " + email);
            }
            user.setEmail(email);
        }

        // Ki·ªÉm tra role m·ªõi t·ªìn t·∫°i (n·∫øu c√≥)
        if (roleId != null) {
            try {
                Long currentRoleId = (user.getRole() != null) ? user.getRole().getId() : null;
                if (currentRoleId == null || !currentRoleId.equals(roleId)) {
                    Role role = roleRepository.findById(roleId)
                            .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y role v·ªõi ID: " + roleId));
                    user.setRole(role);
                }
            } catch (Exception e) {
                // N·∫øu c√≥ l·ªói v·ªõi Hibernate proxy, t√¨m l·∫°i user
                user = userRepository.findById(userId)
                        .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + userId));
                Role role = roleRepository.findById(roleId)
                        .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y role v·ªõi ID: " + roleId));
                user.setRole(role);
            }
        }

        if (firstName != null) {
            user.setFirstName(firstName);
        }
        if (lastName != null) {
            user.setLastName(lastName);
        }
        if (phone != null) {
            user.setPhone(phone);
        }
        if (gender != null) {
            user.setGender(gender);
        }
        if (dateOfBirth != null) {
            user.setDateOfBirth(dateOfBirth);
        }
        if (address != null) {
            user.setAddress(address);
        }
        if (status != null) {
            user.setStatus(status);
        }

        return userRepository.save(user);
    }

    /**
     * X√≥a user (soft delete)
     * @param userId ID c·ªßa user
     * @throws NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y user
     */
    public void deleteUser(Long userId) {
        User user = userRepository.findById(userId)
                .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + userId));

        user.setStatus(User.UserStatus.DELETED);
        userRepository.save(user);
    }

    /**
     * X√≥a user vƒ©nh vi·ªÖn (hard delete)
     * @param userId ID c·ªßa user
     * @throws NotFoundException n·∫øu kh√¥ng t√¨m th·∫•y user
     */
    public void hardDeleteUser(Long userId) {
        if (!userRepository.existsById(userId)) {
            throw new NotFoundException("Kh√¥ng t√¨m th·∫•y user v·ªõi ID: " + userId);
        }
        userRepository.deleteById(userId);
    }

    /**
     * ƒê·∫øm s·ªë user theo roleId
     * @param roleId ID c·ªßa role
     * @return s·ªë l∆∞·ª£ng user
     */
    @Transactional(readOnly = true)
    public long countUsersByRoleId(Long roleId) {
        return userRepository.countByRoleId(roleId);
    }

    /**
     * Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
     * @param email email c·∫ßn ki·ªÉm tra
     * @return true n·∫øu email ƒë√£ t·ªìn t·∫°i
     */
    @Transactional(readOnly = true)
    public boolean isEmailExists(String email) {
        return userRepository.existsByEmail(email);
    }

    /**
     * T·∫°o doctor record trong transaction ri√™ng
     * @param userId ID c·ªßa user
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void createDoctorRecordAsync(Long userId) {
        try {
            Doctor doctor = new Doctor();
            doctor.setUserId(userId);
            doctor.setBio("B√°c sƒ© chuy√™n khoa");
            doctor.setSpecialty("N·ªôi khoa");
            doctor.setStatus("ACTIVE");
            // Kh√¥ng set departmentId v√¨ c√≥ th·ªÉ g√¢y l·ªói constraint
            
            doctorRepository.save(doctor);
            System.out.println("ƒê√£ t·∫°o doctor record cho userId: " + userId);
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫°o doctor record: " + e.getMessage());
        }
    }

    /**
     * T·∫°o patient record trong transaction ri√™ng
     * @param userId ID c·ªßa user
     */
    @Transactional(propagation = Propagation.REQUIRES_NEW)
    public void createPatientRecordAsync(Long userId) {
        try {
            Patient patient = new Patient();
            patient.setUserId(userId);
            patient.setHealthInsuranceNumber(null);
            patient.setMedicalHistory(null);
            patient.setStatus("ACTIVE");
            
            patientRepository.save(patient);
            System.out.println("ƒê√£ t·∫°o patient record cho userId: " + userId);
        } catch (Exception e) {
            System.err.println("L·ªói khi t·∫°o patient record: " + e.getMessage());
        }
    }
}