package com.example.backend.service;

import java.util.List;

import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.example.backend.dto.AuthDTO;
import com.example.backend.dto.UserDTO;
import com.example.backend.exception.ConflictException;
import com.example.backend.exception.NotFoundException;
import com.example.backend.mapper.UserMapper;
import com.example.backend.model.Role;
import com.example.backend.model.User;
import com.example.backend.model.Doctor;
import com.example.backend.model.Patient;
import com.example.backend.model.Department;
import com.example.backend.repository.RoleRepository;
import com.example.backend.repository.UserRepository;
import com.example.backend.repository.DoctorRepository;
import com.example.backend.repository.PatientRepository;
import com.example.backend.repository.DepartmentRepository;
import com.example.backend.service.EmailService;

import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
@Transactional
public class AuthService {

    private final UserRepository userRepository;
    private final RoleRepository roleRepository;
    private final UserMapper userMapper;
    private final PasswordEncoder passwordEncoder;
    private final DoctorRepository doctorRepository;
    private final PatientRepository patientRepository;
    private final DepartmentRepository departmentRepository;
    private final EmailOtpService emailOtpService;
    private final EmailService emailService;

    public AuthDTO.LoginResponse login(AuthDTO.LoginRequest loginRequest) {
        try {
            User user = userRepository.findByEmailWithRole(loginRequest.getEmail())
                    .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: " + loginRequest.getEmail()));

            // Ki·ªÉm tra tr·∫°ng th√°i user
            if (user.getStatus() != User.UserStatus.ACTIVE) {
                return new AuthDTO.LoginResponse("T√†i kho·∫£n ƒë√£ b·ªã kh√≥a ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông", false, null, null);
            }

            // Ki·ªÉm tra m·∫≠t kh·∫©u (t·∫°m th·ªùi so s√°nh tr·ª±c ti·∫øp - sau n√†y s·∫Ω d√πng BCrypt)
            if (!passwordEncoder.matches(loginRequest.getPassword(), user.getPasswordHash())) {
                return new AuthDTO.LoginResponse("M·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c", false, null, null);
            }

            // Chuy·ªÉn ƒë·ªïi sang DTO
            UserDTO.Response userResponse = userMapper.entityToResponseDTO(user);

            return new AuthDTO.LoginResponse("ƒêƒÉng nh·∫≠p th√†nh c√¥ng", true, userResponse, null);

        } catch (NotFoundException e) {
            return new AuthDTO.LoginResponse("Email ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ch√≠nh x√°c", false, null, null);
        } catch (Exception e) {
            return new AuthDTO.LoginResponse("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p", false, null, null);
        }
    }

    public AuthDTO.RegisterResponse register(AuthDTO.RegisterRequest registerRequest) {
        try {
            // Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i
            if (userRepository.findByEmail(registerRequest.getEmail()).isPresent()) {
                return new AuthDTO.RegisterResponse("Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng", false, null);
            }

            // Ki·ªÉm tra m·∫≠t kh·∫©u x√°c nh·∫≠n
            if (!registerRequest.getPassword().equals(registerRequest.getConfirmPassword())) {
                return new AuthDTO.RegisterResponse("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp", false, null);
            }

            // X√°c ƒë·ªãnh role cho user
            final String roleName = (registerRequest.getRole() == null || registerRequest.getRole().trim().isEmpty()) 
                    ? "Patient" 
                    : registerRequest.getRole();
            
            // T√¨m role
            Role userRole = roleRepository.findByName(roleName)
                    .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y role: " + roleName));

            // T·∫°o user m·ªõi
            User newUser = new User();
            newUser.setEmail(registerRequest.getEmail());
            newUser.setPasswordHash(passwordEncoder.encode(registerRequest.getPassword()));
            newUser.setFirstName(registerRequest.getFirstName());
            newUser.setLastName(registerRequest.getLastName());
            newUser.setPhone(registerRequest.getPhone());
            newUser.setGender(registerRequest.getGender());
            newUser.setDateOfBirth(registerRequest.getDateOfBirth());
            newUser.setAddress(registerRequest.getAddress());
            newUser.setStatus(User.UserStatus.ACTIVE);
            newUser.setRole(userRole);

            // L∆∞u user
            User savedUser = userRepository.save(newUser);
            
            // T·∫°o Doctor ho·∫∑c Patient d·ª±a tr√™n role
            try {
                if ("Doctor".equalsIgnoreCase(roleName)) {
                    createDoctor(savedUser, registerRequest);
                } else if ("Patient".equalsIgnoreCase(roleName)) {
                    createPatient(savedUser, registerRequest);
                }
            } catch (Exception e) {
                System.err.println("‚ö†Ô∏è Error creating Doctor/Patient, but User was created: " + e.getMessage());
                // Kh√¥ng throw exception ƒë·ªÉ User v·∫´n ƒë∆∞·ª£c t·∫°o
            }
            
            // G·ª≠i email ch√†o m·ª´ng th√¥ng minh
            try {
                System.out.println("üîÑ B·∫Øt ƒë·∫ßu g·ª≠i email ch√†o m·ª´ng cho: " + savedUser.getEmail());
                sendWelcomeEmail(savedUser);
                System.out.println("‚úÖ Email ch√†o m·ª´ng ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
            } catch (Exception e) {
                // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác t·∫°o t√†i kho·∫£n
                System.err.println("‚ùå L·ªñI: Kh√¥ng th·ªÉ g·ª≠i email ch√†o m·ª´ng: " + e.getMessage());
                e.printStackTrace();
            }

            // Chuy·ªÉn ƒë·ªïi sang DTO
            UserDTO.Response userResponse = userMapper.entityToResponseDTO(savedUser);

            return new AuthDTO.RegisterResponse("ƒêƒÉng k√Ω th√†nh c√¥ng", true, userResponse);

        } catch (ConflictException e) {
            return new AuthDTO.RegisterResponse("Email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng", false, null);
        } catch (Exception e) {
            return new AuthDTO.RegisterResponse("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng k√Ω", false, null);
        }
    }
    
    private void createDoctor(User user, AuthDTO.RegisterRequest request) {
        try {
            Doctor doctor = new Doctor();
            doctor.setDoctorId(user.getId()); // Set doctorId = userId
            doctor.setUser(user);
            doctor.setSpecialty(request.getSpecialty() != null ? request.getSpecialty() : "Ch∆∞a x√°c ƒë·ªãnh");
            doctor.setBio(request.getBio() != null ? request.getBio() : "Ch∆∞a c√≥ th√¥ng tin");
            
            // Department l√† b·∫Øt bu·ªôc trong database, t√¨m department m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng c√≥
            Department department = null;
            if (request.getDepartmentId() != null) {
                department = departmentRepository.findById(request.getDepartmentId()).orElse(null);
            }
            
            // N·∫øu kh√¥ng c√≥ department, l·∫•y department ƒë·∫ßu ti√™n l√†m m·∫∑c ƒë·ªãnh
            if (department == null) {
                department = departmentRepository.findAll().stream().findFirst().orElse(null);
                if (department == null) {
                    throw new RuntimeException("Kh√¥ng t√¨m th·∫•y department n√†o trong h·ªá th·ªëng");
                }
                System.out.println("‚ö†Ô∏è Using default department: " + department.getDepartmentName());
            }
            
            doctor.setDepartment(department);
            doctorRepository.save(doctor);
            System.out.println("‚úÖ Created Doctor for user: " + user.getEmail() + " with ID: " + user.getId());
        } catch (Exception e) {
            System.err.println("‚ùå Error creating Doctor: " + e.getMessage());
            e.printStackTrace();
            throw e; // Re-throw ƒë·ªÉ transaction rollback
        }
    }
    
    private void createPatient(User user, AuthDTO.RegisterRequest request) {
        try {
            Patient patient = new Patient();
            patient.setPatientId(user.getId()); // Set patientId = userId
            patient.setUser(user);
            patient.setMedicalHistory(request.getMedicalHistory() != null ? request.getMedicalHistory() : "Ch∆∞a c√≥ th√¥ng tin");
            
            patientRepository.save(patient);
            System.out.println("‚úÖ Created Patient for user: " + user.getEmail() + " with ID: " + user.getId());
        } catch (Exception e) {
            System.err.println("‚ùå Error creating Patient: " + e.getMessage());
            e.printStackTrace();
            throw e; // Re-throw ƒë·ªÉ transaction rollback
        }
    }

    public AuthDTO.LogoutResponse logout(AuthDTO.LogoutRequest logoutRequest) {
        try {
            // Hi·ªán t·∫°i ch·ªâ tr·∫£ v·ªÅ success
            // Sau n√†y s·∫Ω implement:
            // 1. Validate JWT token
            // 2. Add token to blacklist
            // 3. Clear session if any
            
            if (logoutRequest != null && logoutRequest.getToken() != null) {
                // TODO: Implement token invalidation
                System.out.println("DEBUG: Invalidating token: " + logoutRequest.getToken());
            }
            
            return new AuthDTO.LogoutResponse("ƒêƒÉng xu·∫•t th√†nh c√¥ng", true);
            
        } catch (Exception e) {
            return new AuthDTO.LogoutResponse("C√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng xu·∫•t", false);
        }
    }

    // Fix encoding issues
    private String fixEncoding(String text) {
        if (text == null) return null;
        
        try {
            // Common encoding fixes for Vietnamese characters
            text = text.replace("√É¬π", "√π")
                      .replace("√É¬°", "√°")
                      .replace("√É ", "√†")
                      .replace("√É¬£", "√£")
                      .replace("√É¬¢", "√¢")
                      .replace("√É¬®", "√®")
                      .replace("√É¬©", "√©")
                      .replace("√É¬™", "√™")
                      .replace("√É¬¨", "√¨")
                      .replace("√É¬≠", "√≠")
                      .replace("√É¬≥", "√≥")
                      .replace("√É¬≤", "√≤")
                      .replace("√É¬µ", "√µ")
                      .replace("√É¬¥", "√¥")
                      .replace("√É¬π", "√π")
                      .replace("√É¬∫", "√∫")
                      .replace("√É¬Ω", "√Ω")
                      .replace("√Ñ", "ƒê")
                      .replace("√Ñ'", "ƒë")
                      // Fix specific Google OAuth encoding issues
                      .replace("T·∫§", "T·∫•n")
                      .replace("T·∫§¬πng", "T√πng")
                      .replace("¬πng", "√πng");
            
            System.out.println("DEBUG OAuth: Fixed encoding: '" + text + "'");
            return text;
        } catch (Exception e) {
            System.err.println("ERROR: Failed to fix encoding for: " + text);
            return text;
        }
    }

    // OAuth login/registration (Google)
    public AuthDTO.LoginResponse oauthLogin(String email, String firstName, String lastName, String picture) {
        try {
            System.out.println("DEBUG OAuth: Searching for email = '" + email + "'");
            System.out.println("DEBUG OAuth: Picture URL = '" + picture + "'");
            
            // Fix encoding issues
            System.out.println("DEBUG OAuth: Original firstName = '" + firstName + "'");
            System.out.println("DEBUG OAuth: Original lastName = '" + lastName + "'");
            if (firstName != null) {
                firstName = fixEncoding(firstName);
            }
            if (lastName != null) {
                lastName = fixEncoding(lastName);
            }
            System.out.println("DEBUG OAuth: Fixed firstName = '" + firstName + "'");
            System.out.println("DEBUG OAuth: Fixed lastName = '" + lastName + "'");
            
            // Try to find existing user
            User user = userRepository.findByEmailWithRole(email).orElse(null);
            
            if (user == null) {
                System.out.println("DEBUG OAuth: User not found, creating new user with Patient role");
                
                // Create new user with Patient role
                final String roleName = "Patient";
                Role userRole = roleRepository.findByName(roleName)
                        .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y role: " + roleName));

                User newUser = new User();
                newUser.setEmail(email != null ? email : "");
                newUser.setPasswordHash("oauth_google_user"); // oauth user, dummy password to satisfy validation
                System.out.println("DEBUG OAuth: FirstName from Google = '" + firstName + "'");
                System.out.println("DEBUG OAuth: LastName from Google = '" + lastName + "'");
                newUser.setFirstName(firstName != null && !firstName.trim().isEmpty() ? firstName : "Google");
                newUser.setLastName(lastName != null && !lastName.trim().isEmpty() ? lastName : "User");
                System.out.println("DEBUG OAuth: Set FirstName = '" + newUser.getFirstName() + "'");
                System.out.println("DEBUG OAuth: Set LastName = '" + newUser.getLastName() + "'");
                System.out.println("DEBUG OAuth: Picture value = '" + picture + "'");
                System.out.println("DEBUG OAuth: Picture is null = " + (picture == null));
                System.out.println("DEBUG OAuth: Picture is empty = " + (picture != null && picture.trim().isEmpty()));
                newUser.setAvatarUrl(picture != null && !picture.trim().isEmpty() ? picture : null); // L∆∞u ·∫£nh Google
                System.out.println("DEBUG OAuth: Setting avatarUrl for new user = '" + picture + "'");
                newUser.setStatus(User.UserStatus.ACTIVE);
                newUser.setRole(userRole);

                user = userRepository.save(newUser);
                System.out.println("DEBUG OAuth: Created new user with ID = " + user.getId());
                
                // G·ª≠i email ch√†o m·ª´ng cho t√†i kho·∫£n Google m·ªõi t·∫°o
                try {
                    System.out.println("üîÑ B·∫Øt ƒë·∫ßu g·ª≠i email ch√†o m·ª´ng cho Google user: " + user.getEmail());
                    sendWelcomeEmail(user);
                    System.out.println("‚úÖ Email ch√†o m·ª´ng Google user ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!");
                } catch (Exception e) {
                    // Kh√¥ng throw exception ƒë·ªÉ kh√¥ng ·∫£nh h∆∞·ªüng ƒë·∫øn vi·ªác t·∫°o t√†i kho·∫£n
                    System.err.println("‚ùå L·ªñI: Kh√¥ng th·ªÉ g·ª≠i email ch√†o m·ª´ng cho Google user: " + e.getMessage());
                    e.printStackTrace();
                }
            } else {
                System.out.println("DEBUG OAuth: Found existing user with ID = " + user.getId() + ", status = " + user.getStatus());
                System.out.println("DEBUG OAuth: Current FirstName = '" + user.getFirstName() + "'");
                System.out.println("DEBUG OAuth: Current LastName = '" + user.getLastName() + "'");
                System.out.println("DEBUG OAuth: New FirstName = '" + firstName + "'");
                System.out.println("DEBUG OAuth: New LastName = '" + lastName + "'");
                
                // C·∫≠p nh·∫≠t th√¥ng tin t·ª´ Google n·∫øu c√≥
                boolean needsUpdate = false;
                
                // C·∫≠p nh·∫≠t firstName n·∫øu c√≥
                if (firstName != null && !firstName.trim().isEmpty() && !firstName.equals(user.getFirstName())) {
                    user.setFirstName(firstName);
                    needsUpdate = true;
                    System.out.println("DEBUG OAuth: Updated firstName = '" + firstName + "'");
                }
                
                // C·∫≠p nh·∫≠t lastName n·∫øu c√≥
                if (lastName != null && !lastName.trim().isEmpty() && !lastName.equals(user.getLastName())) {
                    user.setLastName(lastName);
                    needsUpdate = true;
                    System.out.println("DEBUG OAuth: Updated lastName = '" + lastName + "'");
                }
                
                // Fix encoding cho user hi·ªán c√≥ n·∫øu c·∫ßn
                String fixedFirstName = fixEncoding(user.getFirstName());
                String fixedLastName = fixEncoding(user.getLastName());
                if (!fixedFirstName.equals(user.getFirstName()) || !fixedLastName.equals(user.getLastName())) {
                    user.setFirstName(fixedFirstName);
                    user.setLastName(fixedLastName);
                    needsUpdate = true;
                    System.out.println("DEBUG OAuth: Fixed encoding for existing user");
                }
                
                // Force update t√™n t·ª´ Google n·∫øu c√≥
                if (firstName != null && !firstName.trim().isEmpty()) {
                    user.setFirstName(firstName);
                    needsUpdate = true;
                    System.out.println("DEBUG OAuth: Force updated firstName from Google = '" + firstName + "'");
                }
                if (lastName != null && !lastName.trim().isEmpty()) {
                    user.setLastName(lastName);
                    needsUpdate = true;
                    System.out.println("DEBUG OAuth: Force updated lastName from Google = '" + lastName + "'");
                }
                
                // Force update avatar t·ª´ Google n·∫øu c√≥
                if (picture != null && !picture.trim().isEmpty()) {
                    user.setAvatarUrl(picture);
                    needsUpdate = true;
                    System.out.println("DEBUG OAuth: Force updated avatarUrl from Google = '" + picture + "'");
                }
                
                // C·∫≠p nh·∫≠t ·∫£nh Google n·∫øu c√≥
                System.out.println("DEBUG OAuth: Current user avatarUrl = '" + user.getAvatarUrl() + "'");
                System.out.println("DEBUG OAuth: New picture = '" + picture + "'");
                if (picture != null && !picture.trim().isEmpty() && !picture.equals(user.getAvatarUrl())) {
                    user.setAvatarUrl(picture);
                    needsUpdate = true;
                    System.out.println("DEBUG OAuth: Updated user avatar with Google picture = '" + picture + "'");
                } else {
                    System.out.println("DEBUG OAuth: No avatar update needed");
                }
                
                // L∆∞u user n·∫øu c√≥ thay ƒë·ªïi
                if (needsUpdate) {
                    user = userRepository.save(user);
                    System.out.println("DEBUG OAuth: Saved user with updated information");
                }
                
                // Ki·ªÉm tra tr·∫°ng th√°i user
                if (user.getStatus() != User.UserStatus.ACTIVE) {
                    return new AuthDTO.LoginResponse("T√†i kho·∫£n ƒë√£ b·ªã kh√≥a ho·∫∑c kh√¥ng ho·∫°t ƒë·ªông", false, null, null);
                }
            }

            UserDTO.Response userResponse = userMapper.entityToResponseDTO(user);
            System.out.println("DEBUG OAuth: Login successful for user = " + user.getEmail());
            System.out.println("DEBUG OAuth: UserResponse avatarUrl = '" + userResponse.getAvatarUrl() + "'");
            return new AuthDTO.LoginResponse("ƒêƒÉng nh·∫≠p th√†nh c√¥ng (Google)", true, userResponse, null);
        } catch (Exception e) {
            System.err.println("ERROR OAuth: " + e.getMessage());
            e.printStackTrace();
            return new AuthDTO.LoginResponse("ƒêƒÉng nh·∫≠p OAuth th·∫•t b·∫°i: " + e.getMessage(), false, null, null);
        }
    }
    
    // Fix all Google users with encoding issues
    public void fixAllGoogleUsers() {
        try {
            List<User> googleUsers = userRepository.findByPasswordHash("oauth_google_user");
            System.out.println("DEBUG: Found " + googleUsers.size() + " Google users to fix");
            
            for (User user : googleUsers) {
                boolean needsUpdate = false;
                
                // Fix firstName
                String originalFirstName = user.getFirstName();
                String fixedFirstName = fixEncoding(originalFirstName);
                if (!fixedFirstName.equals(originalFirstName)) {
                    user.setFirstName(fixedFirstName);
                    needsUpdate = true;
                    System.out.println("DEBUG: Fixed firstName for user " + user.getId() + ": '" + originalFirstName + "' -> '" + fixedFirstName + "'");
                }
                
                // Fix lastName
                String originalLastName = user.getLastName();
                String fixedLastName = fixEncoding(originalLastName);
                if (!fixedLastName.equals(originalLastName)) {
                    user.setLastName(fixedLastName);
                    needsUpdate = true;
                    System.out.println("DEBUG: Fixed lastName for user " + user.getId() + ": '" + originalLastName + "' -> '" + fixedLastName + "'");
                }
                
                if (needsUpdate) {
                    userRepository.save(user);
                    System.out.println("DEBUG: Updated user " + user.getId());
                }
            }
        } catch (Exception e) {
            System.err.println("ERROR: Failed to fix Google users: " + e.getMessage());
        }
    }

    public AuthDTO.ResetPasswordResponse resetPassword(String email, String otp, String newPassword) {
        try {
            // Find user by email
            User user = userRepository.findByEmailWithRole(email)
                    .orElseThrow(() -> new NotFoundException("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email: " + email));

            // Verify OTP tr∆∞·ªõc khi cho ph√©p reset password
            if (!emailOtpService.verifyOtp(email, otp)) {
                return new AuthDTO.ResetPasswordResponse("M√£ OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n", false);
            }

            // Hash and update password
            user.setPasswordHash(passwordEncoder.encode(newPassword));
            userRepository.save(user);

            // X√≥a OTP sau khi reset password th√†nh c√¥ng
            emailOtpService.consumeOtp(email);

            return new AuthDTO.ResetPasswordResponse("ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u th√†nh c√¥ng", true);
        } catch (NotFoundException e) {
            return new AuthDTO.ResetPasswordResponse("Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng", false);
        } catch (Exception e) {
            return new AuthDTO.ResetPasswordResponse("L·ªói khi ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: " + e.getMessage(), false);
        }
    }
    
    /**
     * G·ª≠i email ch√†o m·ª´ng th√¥ng minh cho user m·ªõi
     */
    private void sendWelcomeEmail(User user) {
        try {
            String roleName = user.getRole() != null ? user.getRole().getName() : "Ng∆∞·ªùi d√πng";
            String userName = (user.getFirstName() != null ? user.getFirstName() : "") + 
                            (user.getLastName() != null ? " " + user.getLastName() : "");
            
            String subject = "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ClinicBooking!";
            String content = buildWelcomeEmailContent(userName, roleName, user.getEmail(), user);
            
            emailService.sendSimpleEmail(user.getEmail(), subject, content);
            System.out.println("‚úÖ Email ch√†o m·ª´ng ƒë√£ g·ª≠i ƒë·∫øn: " + user.getEmail());
            
        } catch (Exception e) {
            System.err.println("‚ùå L·ªói g·ª≠i email ch√†o m·ª´ng: " + e.getMessage());
            throw e;
        }
    }
    
    /**
     * X√¢y d·ª±ng n·ªôi dung email ch√†o m·ª´ng th√¥ng minh
     */
    private String buildWelcomeEmailContent(String userName, String roleName, String email, User user) {
        StringBuilder content = new StringBuilder();
        
        content.append("Xin ch√†o ").append(userName).append("!\n\n");
        content.append("üéâ Ch√∫c m·ª´ng b·∫°n ƒë√£ ƒëƒÉng k√Ω th√†nh c√¥ng t√†i kho·∫£n ").append(roleName).append(" t·∫°i ClinicBooking!\n\n");
        
        // N·ªôi dung th√¥ng minh d·ª±a tr√™n role
        if ("Doctor".equalsIgnoreCase(roleName)) {
            content.append("üë®‚Äç‚öïÔ∏è V·ªõi t√†i kho·∫£n B√°c sƒ©, b·∫°n c√≥ th·ªÉ:\n");
            content.append("‚Ä¢ Qu·∫£n l√Ω l·ªãch kh√°m v√† l·ªãch l√†m vi·ªác\n");
            content.append("‚Ä¢ Xem danh s√°ch b·ªánh nh√¢n\n");
            content.append("‚Ä¢ T·∫°o ƒë∆°n thu·ªëc v√† h·ªì s∆° b·ªánh √°n\n");
            content.append("‚Ä¢ Nh·∫≠n th√¥ng b√°o v·ªÅ l·ªãch kh√°m m·ªõi\n\n");
        } else if ("Patient".equalsIgnoreCase(roleName)) {
            content.append("üè• V·ªõi t√†i kho·∫£n B·ªánh nh√¢n, b·∫°n c√≥ th·ªÉ:\n");
            content.append("‚Ä¢ ƒê·∫∑t l·ªãch kh√°m v·ªõi b√°c sƒ© chuy√™n khoa\n");
            content.append("‚Ä¢ Xem l·ªãch s·ª≠ kh√°m b·ªánh\n");
            content.append("‚Ä¢ Nh·∫≠n nh·∫Øc nh·ªü l·ªãch kh√°m\n");
            content.append("‚Ä¢ Qu·∫£n l√Ω h·ªì s∆° s·ª©c kh·ªèe c√° nh√¢n\n\n");
        } else {
            content.append("üîß V·ªõi t√†i kho·∫£n ").append(roleName).append(", b·∫°n c√≥ th·ªÉ:\n");
            content.append("‚Ä¢ Truy c·∫≠p c√°c t√≠nh nƒÉng ph√π h·ª£p v·ªõi vai tr√≤\n");
            content.append("‚Ä¢ Nh·∫≠n th√¥ng b√°o quan tr·ªçng\n\n");
        }
        
        // Th√™m th√¥ng tin ƒë·∫∑c bi·ªát cho Google users
        if (user.getPasswordHash() != null && user.getPasswordHash().equals("oauth_google_user")) {
            content.append("üîó ƒêƒÉng nh·∫≠p b·∫±ng Google:\n");
            content.append("‚Ä¢ B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p nhanh b·∫±ng t√†i kho·∫£n Google\n");
            content.append("‚Ä¢ Th√¥ng tin c√° nh√¢n ƒë∆∞·ª£c ƒë·ªìng b·ªô t·ª´ Google\n");
            content.append("‚Ä¢ Kh√¥ng c·∫ßn nh·ªõ m·∫≠t kh·∫©u ri√™ng\n\n");
        }
        
        content.append("üìß Email ƒëƒÉng nh·∫≠p: ").append(email).append("\n");
        
        // Th√¥ng tin ƒëƒÉng nh·∫≠p kh√°c nhau cho Google vs Regular users
        if (user.getPasswordHash() != null && user.getPasswordHash().equals("oauth_google_user")) {
            content.append("üîó ƒêƒÉng nh·∫≠p: S·ª≠ d·ª•ng t√†i kho·∫£n Google (kh√¥ng c·∫ßn m·∫≠t kh·∫©u)\n\n");
        } else {
            content.append("üîê M·∫≠t kh·∫©u: [M·∫≠t kh·∫©u b·∫°n ƒë√£ ƒë·∫∑t]\n\n");
        }
        
        content.append("üí° M·∫πo s·ª≠ d·ª•ng:\n");
        content.append("‚Ä¢ Lu√¥n ki·ªÉm tra email ƒë·ªÉ nh·∫≠n th√¥ng b√°o quan tr·ªçng\n");
        content.append("‚Ä¢ C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n ƒë·ªÉ ƒë∆∞·ª£c ph·ª•c v·ª• t·ªët nh·∫•t\n");
        content.append("‚Ä¢ Li√™n h·ªá h·ªó tr·ª£ n·∫øu c·∫ßn tr·ª£ gi√∫p\n\n");
        
        content.append("Ch√∫c b·∫°n c√≥ tr·∫£i nghi·ªám tuy·ªát v·ªùi v·ªõi ClinicBooking!\n\n");
        content.append("Tr√¢n tr·ªçng,\n");
        content.append("ƒê·ªôi ng≈© ClinicBooking üè•");
        
        return content.toString();
    }
}