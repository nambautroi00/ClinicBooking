import React, { useState, useEffect } from "react";
import { Card, Container, Row, Col, Button, Table, Modal, Form, Badge, Alert } from "react-bootstrap";
import { Search, Plus, Eye, Edit, FileText, User, Calendar, Clock, Pill } from "lucide-react";
import medicalRecordApi from "../../api/medicalRecordApi";
import doctorApi from "../../api/doctorApi";
import Cookies from "js-cookie";

const MedicalRecords = () => {
  const [medicalRecords, setMedicalRecords] = useState([]);
  const [loading, setLoading] = useState(true);
  const [showModal, setShowModal] = useState(false);
  const [selectedRecord, setSelectedRecord] = useState(null);
  const [searchTerm, setSearchTerm] = useState("");
  const [filterStatus, setFilterStatus] = useState("all");
  const [doctorId, setDoctorId] = useState(null);

  // L·∫•y doctorId t·ª´ cookie
  useEffect(() => {
    const userId = Cookies.get("userId");
    console.log('üîç Getting doctorId for userId:', userId);
    if (userId) {
      doctorApi
        .getDoctorByUserId(userId)
        .then((res) => {
          console.log('‚úÖ Doctor API response:', res);
          const data = res.data || res;
          console.log('üìã Doctor data:', data);
          // C√≥ th·ªÉ doctorId n·∫±m ·ªü data.doctorId ho·∫∑c data.doctor?.doctorId
          const id = data.doctorId || data.doctor?.doctorId || data.id;
          console.log('üë®‚Äç‚öïÔ∏è Extracted doctorId:', id);
          if (id) {
            setDoctorId(id);
          } else {
            console.error('‚ùå Could not find doctorId in response:', data);
          }
        })
        .catch((err) => {
          console.error("‚ùå Error getting doctor info:", err);
          console.error("‚ùå Error details:", err.response?.data);
        });
    } else {
      console.warn('‚ö†Ô∏è No userId found in cookies');
    }
  }, []);

  // L·∫•y d·ªØ li·ªáu t·ª´ backend
  useEffect(() => {
    if (doctorId) {
      loadMedicalRecords();
    }
  }, [doctorId]);

  const loadMedicalRecords = async () => {
    try {
      setLoading(true);
      console.log('üîç Loading medical records for doctorId:', doctorId, 'Type:', typeof doctorId);
      
      // L·∫•y h·ªì s∆° b·ªánh √°n theo doctor ho·∫∑c t·∫•t c·∫£
      let response;
      if (doctorId && doctorId !== 'null' && doctorId !== 'undefined') {
        // ƒê·∫£m b·∫£o doctorId l√† s·ªë
        const id = typeof doctorId === 'string' ? parseInt(doctorId, 10) : doctorId;
        if (isNaN(id)) {
          console.error('‚ùå Invalid doctorId:', doctorId);
          setMedicalRecords([]);
          return;
        }
        console.log('üìû Calling API with doctorId:', id);
        response = await medicalRecordApi.getMedicalRecordsByDoctor(id);
      } else {
        console.log('üìû Calling getAllMedicalRecords (no doctorId)');
        response = await medicalRecordApi.getAllMedicalRecords();
      }
      
      console.log('‚úÖ Medical records loaded:', response);
      console.log('‚úÖ Response data:', response.data);
      console.log('‚úÖ Response status:', response.status);
      
      // Chuy·ªÉn ƒë·ªïi d·ªØ li·ªáu t·ª´ backend format sang frontend format
      const records = (response.data || []).map(record => {
        // Debug prescription data
        if (record.prescription) {
          console.log('üîç Prescription found:', {
            prescriptionId: record.prescription.prescriptionId,
            notes: record.prescription.notes,
            itemsCount: record.prescription.items?.length || 0,
            items: record.prescription.items
          });
        }
        
        return {
          id: record.recordId,
          patientId: record.patientId,
          patientName: record.patientName || 'Ch∆∞a x√°c ƒë·ªãnh',
          age: record.patientAge || 'N/A',
          gender: record.patientGender || 'N/A',
          phone: record.patientPhone || '',
          diagnosis: record.diagnosis || '',
          advice: record.advice || '',
          doctorName: record.doctorName || 'Ch∆∞a x√°c ƒë·ªãnh',
          appointmentDate: record.appointmentDate || record.createdAt,
          createdDate: record.createdAt,
          status: 'completed', // Medical record lu√¥n completed khi ƒë√£ t·∫°o
          notes: record.notes || "",
          prescription: record.prescription // Th√™m prescription data
        };
      });
      
      console.log('üìä Mapped records:', records.length);
      if (records.length > 0) {
        console.log('üîç First record:', {
          id: records[0].id,
          patientName: records[0].patientName,
          patientId: records[0].patientId,
          age: records[0].age,
          gender: records[0].gender,
          diagnosis: records[0].diagnosis,
          hasPrescription: !!records[0].prescription
        });
      }

      setMedicalRecords(records);
    } catch (error) {
      console.error('‚ùå L·ªói khi t·∫£i h·ªì s∆° b·ªánh √°n t·ª´ backend:', error);
      console.error('‚ùå Error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        url: error.config?.url
      });
      
      // Show error message instead of mock data
      if (error.response?.status === 400) {
        console.error('‚ùå Bad Request - C√≥ th·ªÉ doctorId kh√¥ng h·ª£p l·ªá:', doctorId);
        console.error('‚ùå Error response:', error.response?.data);
        // Th·ª≠ g·ªçi getAllMedicalRecords n·∫øu doctorId c√≥ v·∫•n ƒë·ªÅ
        try {
          console.log('üîÑ Retrying with getAllMedicalRecords...');
          const fallbackResponse = await medicalRecordApi.getAllMedicalRecords();
          const records = (fallbackResponse.data || []).map(record => ({
            id: record.recordId,
            patientId: record.patientId,
            patientName: record.patientName || 'Ch∆∞a x√°c ƒë·ªãnh',
            age: record.patientAge || 'N/A',
            gender: record.patientGender || 'N/A',
            phone: record.patientPhone || '',
            diagnosis: record.diagnosis || '',
            advice: record.advice || '',
            doctorName: record.doctorName || 'Ch∆∞a x√°c ƒë·ªãnh',
            appointmentDate: record.appointmentDate || record.createdAt,
            createdDate: record.createdAt,
            status: 'completed',
            notes: record.notes || "",
            prescription: record.prescription
          }));
          setMedicalRecords(records);
          return;
        } catch (fallbackError) {
          console.error('‚ùå Fallback also failed:', fallbackError);
        }
        setMedicalRecords([]);
      } else if (error.response?.status === 404) {
        console.log('‚ÑπÔ∏è Kh√¥ng t√¨m th·∫•y h·ªì s∆° b·ªánh √°n');
        setMedicalRecords([]);
      } else if (error.response?.status === 401) {
        console.error('üîí Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p h·ªì s∆° b·ªánh √°n');
        setMedicalRecords([]);
      } else {
        console.error('üîå Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server backend');
        setMedicalRecords([]);
      }
    } finally {
      setLoading(false);
    }
  };

  const getStatusBadge = (status) => {
    const statusConfig = {
      new: { variant: "primary", text: "M·ªõi" },
      "in-progress": { variant: "warning", text: "ƒêang ƒëi·ªÅu tr·ªã" },
      completed: { variant: "success", text: "Ho√†n th√†nh" }
    };
    return statusConfig[status] || { variant: "secondary", text: "Kh√¥ng x√°c ƒë·ªãnh" };
  };

  const filteredRecords = medicalRecords.filter(record => {
    const matchesSearch = (record.patientName || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (record.patientId || '').toLowerCase().includes(searchTerm.toLowerCase()) ||
                         (record.diagnosis || '').toLowerCase().includes(searchTerm.toLowerCase());
    const matchesStatus = filterStatus === "all" || record.status === filterStatus;
    return matchesSearch && matchesStatus;
  });

  const handleViewRecord = (record) => {
    setSelectedRecord(record);
    setShowModal(true);
  };

  const handleNewRecord = () => {
    setSelectedRecord(null);
    setShowModal(true);
  };

  const handleSaveRecord = async (recordData) => {
    try {
      setLoading(true);
      
      if (selectedRecord) {
        // C·∫≠p nh·∫≠t h·ªì s∆° c√≥ s·∫µn
        await medicalRecordApi.updateMedicalRecord(selectedRecord.id, recordData);
      } else {
        // T·∫°o h·ªì s∆° m·ªõi
        await medicalRecordApi.createMedicalRecord(recordData);
      }
      
      // T·∫£i l·∫°i danh s√°ch
      await loadMedicalRecords();
      setShowModal(false);
      
      // Th√¥ng b√°o th√†nh c√¥ng (c√≥ th·ªÉ d√πng toast notification)
      console.log('L∆∞u h·ªì s∆° b·ªánh √°n th√†nh c√¥ng!');
    } catch (error) {
      console.error('L·ªói khi l∆∞u h·ªì s∆° b·ªánh √°n:', error);
      alert('C√≥ l·ªói x·∫£y ra khi l∆∞u h·ªì s∆°. Vui l√≤ng th·ª≠ l·∫°i.');
    } finally {
      setLoading(false);
    }
  };

  return (
    <Container fluid className="py-4">
      {/* Header */}
      <Row className="mb-4">
        <Col>
          <Card className="shadow-sm">
            <Card.Body>
              <div className="d-flex justify-content-between align-items-center">
                <div>
                  <h2 className="text-primary mb-1">
                    <FileText className="me-2" size={32} />
                    H·ªì S∆° B·ªánh √Ån
                  </h2>
                  <p className="text-muted mb-0">Qu·∫£n l√Ω h·ªì s∆° kh√°m b·ªánh v√† ƒëi·ªÅu tr·ªã</p>
                </div>
                <Button variant="primary" onClick={handleNewRecord}>
                  <Plus className="me-2" size={18} />
                  T·∫°o B·ªánh √Ån M·ªõi
                </Button>
              </div>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* Stats Cards */}
      <Row className="mb-4">
        <Col md={3}>
          <Card className="text-center shadow-sm border-0" style={{borderLeft: "4px solid #0d6efd"}}>
            <Card.Body>
              <h3 className="text-primary">{medicalRecords.length}</h3>
              <p className="text-muted mb-0">T·ªïng B·ªánh √Ån</p>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center shadow-sm border-0" style={{borderLeft: "4px solid #198754"}}>
            <Card.Body>
              <h3 className="text-success">{medicalRecords.filter(r => r.status === 'completed').length}</h3>
              <p className="text-muted mb-0">ƒê√£ Ho√†n Th√†nh</p>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center shadow-sm border-0" style={{borderLeft: "4px solid #ffc107"}}>
            <Card.Body>
              <h3 className="text-warning">{medicalRecords.filter(r => r.status === 'in-progress').length}</h3>
              <p className="text-muted mb-0">ƒêang ƒêi·ªÅu Tr·ªã</p>
            </Card.Body>
          </Card>
        </Col>
        <Col md={3}>
          <Card className="text-center shadow-sm border-0" style={{borderLeft: "4px solid #dc3545"}}>
            <Card.Body>
              <h3 className="text-primary">{medicalRecords.filter(r => r.status === 'new').length}</h3>
              <p className="text-muted mb-0">M·ªõi</p>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* Search and Filter */}
      <Row className="mb-4">
        <Col md={8}>
          <div className="position-relative">
            <Search className="position-absolute" size={18} style={{left: "12px", top: "12px", color: "#6c757d"}} />
            <Form.Control
              type="text"
              placeholder="T√¨m ki·∫øm theo t√™n b·ªánh nh√¢n, m√£ BN, ch·∫©n ƒëo√°n..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              style={{paddingLeft: "45px"}}
            />
          </div>
        </Col>
        <Col md={4}>
          <Form.Select value={filterStatus} onChange={(e) => setFilterStatus(e.target.value)}>
            <option value="all">T·∫•t c·∫£ tr·∫°ng th√°i</option>
            <option value="new">M·ªõi</option>
            <option value="in-progress">ƒêang ƒëi·ªÅu tr·ªã</option>
            <option value="completed">Ho√†n th√†nh</option>
          </Form.Select>
        </Col>
      </Row>

      {/* Medical Records Table */}
      <Card className="shadow-sm">
        <Card.Body>
          {loading ? (
            <div className="text-center py-5">
              <div className="spinner-border text-primary" role="status">
                <span className="visually-hidden">Loading...</span>
              </div>
              <p className="mt-2 text-muted">ƒêang t·∫£i d·ªØ li·ªáu...</p>
            </div>
          ) : filteredRecords.length === 0 ? (
            <Alert variant="info" className="text-center">
              <FileText size={48} className="mb-3 text-muted" />
              <h5>Kh√¥ng t√¨m th·∫•y b·ªánh √°n n√†o</h5>
              <p className="mb-0">Th·ª≠ thay ƒë·ªïi t·ª´ kh√≥a t√¨m ki·∫øm ho·∫∑c b·ªô l·ªçc</p>
            </Alert>
          ) : (
            <Table responsive hover>
              <thead className="table-light">
                <tr>
                  <th>M√£ BN</th>
                  <th>B·ªánh nh√¢n</th>
                  <th>Tu·ªïi/Gi·ªõi t√≠nh</th>
                  <th>Ch·∫©n ƒëo√°n</th>
                  <th>B√°c sƒ©</th>
                  <th>ƒê∆°n thu·ªëc</th>
                  <th>Ng√†y t·∫°o</th>
                  <th>Thao t√°c</th>
                </tr>
              </thead>
              <tbody>
                {filteredRecords.map(record => {
                  const statusConfig = getStatusBadge(record.status);
                  return (
                    <tr key={record.id}>
                      <td>
                        <strong className="text-primary">{record.patientId}</strong>
                      </td>
                      <td>
                        <div>
                          <strong>{record.patientName}</strong>
                          <br />
                          <small className="text-muted">{record.phone}</small>
                        </div>
                      </td>
                      <td>{record.age} tu·ªïi / {record.gender}</td>
                      <td>
                        <strong>{record.diagnosis}</strong>
                        {record.advice && (
                          <>
                            <br />
                            <small className="text-muted">L·ªùi khuy√™n: {record.advice}</small>
                          </>
                        )}
                      </td>
                      <td>
                        <div>
                          <strong>{record.doctorName}</strong>
                        </div>
                      </td>
                      <td>
                        {record.prescription ? (
                          <Badge bg="success">
                            <Pill size={12} className="me-1" />
                            C√≥ ƒë∆°n thu·ªëc
                          </Badge>
                        ) : (
                          <Badge bg="secondary">
                            <Pill size={12} className="me-1" />
                            Ch∆∞a k√™ ƒë∆°n
                          </Badge>
                        )}
                      </td>
                      <td>
                        <div className="d-flex align-items-center">
                          <Calendar size={14} className="me-1 text-muted" />
                          {new Date(record.createdDate).toLocaleDateString('vi-VN')}
                        </div>
                      </td>
                      <td>
                        <Button
                          variant="outline-primary"
                          size="sm"
                          onClick={() => handleViewRecord(record)}
                          className="me-2"
                        >
                          <Eye size={14} className="me-1" />
                          Xem
                        </Button>
                      </td>
                    </tr>
                  );
                })}
              </tbody>
            </Table>
          )}
        </Card.Body>
      </Card>

      {/* Medical Record Detail Modal */}
      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>
            {selectedRecord ? `B·ªánh √Ån - ${selectedRecord.patientName}` : "T·∫°o B·ªánh √Ån M·ªõi"}
          </Modal.Title>
        </Modal.Header>
        <Modal.Body>
          {selectedRecord ? (
            <div>
              {/* Patient Info */}
              <Card className="mb-3">
                <Card.Header className="bg-light">
                  <h6 className="mb-0">
                    <User className="me-2" size={18} />
                    Th√¥ng Tin B·ªánh Nh√¢n
                  </h6>
                </Card.Header>
                <Card.Body>
                  <Row>
                    <Col md={6}>
                      <p><strong>M√£ BN:</strong> {selectedRecord.patientId}</p>
                      <p><strong>H·ªç t√™n:</strong> {selectedRecord.patientName}</p>
                      <p><strong>Tu·ªïi:</strong> {selectedRecord.age}</p>
                    </Col>
                    <Col md={6}>
                      <p><strong>Gi·ªõi t√≠nh:</strong> {selectedRecord.gender}</p>
                      <p><strong>ƒêi·ªán tho·∫°i:</strong> {selectedRecord.phone}</p>
                      <p><strong>B√°c sƒ© kh√°m:</strong> {selectedRecord.doctorName}</p>
                    </Col>
                  </Row>
                </Card.Body>
              </Card>

              {/* Medical Details */}
              <Card className="mb-3">
                <Card.Header className="bg-light">
                  <h6 className="mb-0">
                    <FileText className="me-2" size={18} />
                    Th√¥ng Tin Y T·∫ø
                  </h6>
                </Card.Header>
                <Card.Body>
                  <Row>
                    <Col md={12}>
                      <p><strong>Ch·∫©n ƒëo√°n:</strong></p>
                      <p className="ps-3">{selectedRecord.diagnosis}</p>
                      
                      {selectedRecord.advice && (
                        <>
                          <p><strong>L·ªùi khuy√™n:</strong></p>
                          <p className="ps-3">{selectedRecord.advice}</p>
                        </>
                      )}
                      
                      {selectedRecord.notes && (
                        <>
                          <p><strong>Ghi ch√∫:</strong></p>
                          <p className="ps-3">{selectedRecord.notes}</p>
                        </>
                      )}
                    </Col>
                  </Row>
                  
                  <div className="d-flex justify-content-between align-items-center mt-3">
                    <div className="text-muted">
                      <strong>Tr·∫°ng th√°i:</strong> 
                      <Badge bg="success" className="ms-2">ƒê√£ ho√†n th√†nh</Badge>
                    </div>
                    <div className="text-muted">
                      <Clock size={14} className="me-1" />
                      Ng√†y t·∫°o: {new Date(selectedRecord.createdDate).toLocaleDateString('vi-VN')}
                    </div>
                  </div>
                </Card.Body>
              </Card>

              {/* Prescription Details */}
              {selectedRecord.prescription && (
                <Card className="mb-3">
                  <Card.Header className="bg-light">
                    <h6 className="mb-0">
                      <Pill className="me-2" size={18} />
                      ƒê∆°n Thu·ªëc
                    </h6>
                  </Card.Header>
                  <Card.Body>
                    <Row>
                      <Col md={12}>
                        <p><strong>Ghi ch√∫ ƒë∆°n thu·ªëc:</strong></p>
                        <p className="ps-3">{selectedRecord.prescription.notes}</p>
                        
                        <p><strong>Thu·ªëc k√™ ƒë∆°n:</strong></p>
                        {(() => {
                          const items = selectedRecord.prescription.items || [];
                          if (items.length > 0) {
                            return (
                              <div className="ps-3">
                                <Table bordered size="sm" className="mt-2">
                                  <thead className="table-light">
                                    <tr>
                                      <th>STT</th>
                                      <th>T√™n thu·ªëc</th>
                                      <th>Li·ªÅu d√πng</th>
                                      <th>Th·ªùi gian</th>
                                      <th>S·ªë l∆∞·ª£ng</th>
                                    </tr>
                                  </thead>
                                  <tbody>
                                    {items.map((item, index) => (
                                      <tr key={index}>
                                        <td>{index + 1}</td>
                                        <td><strong>{item.medicineName || `Thu·ªëc ${index + 1}`}</strong></td>
                                        <td>{item.dosage || 'N/A'}</td>
                                        <td>{item.duration || 'N/A'}</td>
                                        <td>{item.quantity || 1}</td>
                                      </tr>
                                    ))}
                                  </tbody>
                                </Table>
                              </div>
                            );
                          } else {
                            return <p className="ps-3 text-muted">Kh√¥ng c√≥ thu·ªëc n√†o ƒë∆∞·ª£c k√™</p>;
                          }
                        })()}
                      </Col>
                    </Row>
                    
                    <div className="text-muted mt-2">
                      <Clock size={14} className="me-1" />
                      Ng√†y k√™ ƒë∆°n: {selectedRecord.prescription.createdAt ? 
                        new Date(selectedRecord.prescription.createdAt).toLocaleDateString('vi-VN') : 
                        'N/A'}
                    </div>
                  </Card.Body>
                </Card>
              )}
            </div>
          ) : (
            <Form>
              <Row>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>M√£ b·ªánh nh√¢n</Form.Label>
                    <Form.Control type="text" placeholder="Nh·∫≠p m√£ b·ªánh nh√¢n" />
                  </Form.Group>
                </Col>
                <Col md={6}>
                  <Form.Group className="mb-3">
                    <Form.Label>H·ªç t√™n b·ªánh nh√¢n</Form.Label>
                    <Form.Control type="text" placeholder="Nh·∫≠p h·ªç t√™n" />
                  </Form.Group>
                </Col>
              </Row>
              <Row>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>Tu·ªïi</Form.Label>
                    <Form.Control type="number" placeholder="Tu·ªïi" />
                  </Form.Group>
                </Col>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>Gi·ªõi t√≠nh</Form.Label>
                    <Form.Select>
                      <option>Ch·ªçn gi·ªõi t√≠nh</option>
                      <option value="Nam">Nam</option>
                      <option value="N·ªØ">N·ªØ</option>
                    </Form.Select>
                  </Form.Group>
                </Col>
                <Col md={4}>
                  <Form.Group className="mb-3">
                    <Form.Label>ƒêi·ªán tho·∫°i</Form.Label>
                    <Form.Control type="tel" placeholder="S·ªë ƒëi·ªán tho·∫°i" />
                  </Form.Group>
                </Col>
              </Row>
              <Form.Group className="mb-3">
                <Form.Label>Tri·ªáu ch·ª©ng</Form.Label>
                <Form.Control as="textarea" rows={3} placeholder="M√¥ t·∫£ tri·ªáu ch·ª©ng..." />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>Ch·∫©n ƒëo√°n</Form.Label>
                <Form.Control type="text" placeholder="Ch·∫©n ƒëo√°n b·ªánh..." />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>Ph∆∞∆°ng √°n ƒëi·ªÅu tr·ªã</Form.Label>
                <Form.Control as="textarea" rows={3} placeholder="Ph∆∞∆°ng √°n ƒëi·ªÅu tr·ªã..." />
              </Form.Group>
              <Form.Group className="mb-3">
                <Form.Label>Ghi ch√∫</Form.Label>
                <Form.Control as="textarea" rows={2} placeholder="Ghi ch√∫ th√™m..." />
              </Form.Group>
            </Form>
          )}
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowModal(false)}>
            ƒê√≥ng
          </Button>
          {!selectedRecord && (
            <Button variant="primary">
              L∆∞u B·ªánh √Ån
            </Button>
          )}
        </Modal.Footer>
      </Modal>
    </Container>
  );
};

export default MedicalRecords;